Lucas Hardman Gomes Campos Franca - 1113567

/********** Exercicio 1 **********/

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/wait.h>
#include <sys/stat.h>

int main (void){

	int id, pid, status;
	int i, j;
	int seg1, seg2, seg3;
	int *m1, *m2, *m3;

	seg1 = shmget(IPC_PRIVATE,9*sizeof(int),IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	seg2 = shmget(IPC_PRIVATE,9*sizeof(int),IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	seg3 = shmget(IPC_PRIVATE,9*sizeof(int),IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);

	m1 = (int*) shmat(seg1,0,0);
	m2 = (int*) shmat(seg2,0,0);
	m3 = (int*) shmat(seg3,0,0);

	m1[0]=0;
	m1[1]=1;
	m1[2]=2;
	m1[3]=3;
	m1[4]=4;
	m1[5]=5;
	m1[6]=6;
	m1[7]=7;
	m1[8]=8;

	m2[0]=8;
	m2[1]=7;
	m2[2]=6;
	m2[3]=5;
	m2[4]=4;
	m2[5]=3;
	m2[6]=2;
	m2[7]=1;
	m2[8]=0;

	for(i=0; i<9; i++){

		pid = fork();

		if (pid == 0) 
			m3[i] = m1[i]+m2[i];
		else{
			waitpid ( -1, &status, 0);
			exit(0);
		}
	}

	for(i=0;i<9;i++)

		printf("p3[%d] = %d\n", i, m3[i]);


	return 0;
}

/*

Explicação:

	A saida do programa é uma matriz representada por vetor simples m3 que cada cada elemento é a soma dos elementos
correspondentes de m1 e m2. Por exemplo: p3[0] = p1[0] + p2[0].

	Com este programa é possivel entender que mesmo processos diferentes podem
compartilhar um espaćo em comum na memoria, podendo assim assumir valores e
fazer contas que podem ser acessadas por outros processos envolvidos.

Saída:

p3[0] = 8
p3[1] = 8
p3[2] = 8
p3[3] = 8
p3[4] = 8
p3[5] = 8
p3[6] = 8
p3[7] = 8
p3[8] = 8

*/

/********** Exercicio 2 **********/

#include <stdio.h>
#include <sys/shm.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>

int main (void) {

	int seg;
	char *memo;
	char msgIN[80];

	printf("Digite a mensagem: \n");

	scanf("%s", msgIN);

	seg = shmget (8752, sizeof(int) * 80, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);

	if (seg == -1) {
		printf("Erro\n");
		return -1;
	}

	memo = (char*) shmat(seg,0,0);

	// msg : mem compartilhada / msgIN : memoria dos sistema

	sprintf(memo, msgIN);

	shmdt(memo);

	return 0;

}

/*

Explicação:

Ao alocarmos a memória compartilhada (“shmget”) e atribuirmos sua chave para
8752, tudo o que salvamos naquela memória fica gravado, mesmo após liberar a
memória (shmdt), porém não podemos usar o comando “shmctl” pois dessa forma
iríamos desalocar a memória compartilhada e, como vamos usá-la no programa
seguinte, não faria sentido desaloca-la.

Execução e saída:

Digite a mensagem:

Hello!

*/

#include <stdio.h>
#include <sys/shm.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>

int main (void) {

	int seg;
	char *msg;

	seg = shmget (8752, sizeof (int) * 80, S_IRUSR | S_IWUSR);

	if (seg == -1) {

		printf("Erro\n");
		return -1;
	}

	msg = (char*) shmat(seg,0,0);

	printf("A mensagem do dia eh: %s\n", msg);

	shmdt(msg);

	shmctl(seg, IPC_RMID, 0);

	return 0;
}

/*

Explicação:

Nesse programa, tivemos que utilizar o comando “shmctl” para desalocarmos a memória
já utilizada. Na hora dos testes tivemos que mudar várias vezes o valor das chaves de
memória, pois quando utilizamos uma vez a mesma fica “usada” e não é possível
fazer modificações em cima dela.

Esse programa mostra que o processo pode ser utilizado por mais de um programa,
sendo possível alocar e utilizar a mesma memória compartilhada.
Execução e saída:

A mensagem do dia eh: Hello!

*/

/********** Exercicio 3 **********/

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>

int main (void) {

	int *vet, n = 9, values[5] = {3,5,1,9,1000};
	int seg, pid;
	int ini = 0,i;
	int j, procurado = 0, encontrado = 0;

	seg = shmget (IPC_PRIVATE, sizeof(int)*n, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	if (seg == -1) {
		printf ("Erro!"); 
		exit(1);
	}

	vet = (int*) shmat (seg, 0, 0);
	for (i = 0; i < n; i++) {
		vet[i] = values[i];
	}

	printf("Digite um dos seguintes valores para procurar:\n");
	for(j=0;j<5;j++){
		printf("%d\n", values[j]);
	}
	printf("\nValor: ");
	scanf("%d", &procurado);

	pid = fork();

	if (pid != 0) {
		ini += 3;
		pid = fork();
		if (pid != 0) {
			ini+=3;
			pid = fork();
		}
	}
	if (pid == 0) {
		for(i=0; i < 3; i++) {	
			if(vet[i+ini] == procurado){
				printf("O valor esta na posicao %d\n", i+ini);
				encontrado = 1;
				exit(1);
			}
		}
	}

	shmdt (vet); 
	shmctl (seg, IPC_RMID, 0); 

	return 0;
}

/*

Explicação:

O programa possui um vetor de 5 posicoes que é colocado na memoria compartilhada.
O usuario recebe uma mensagem com os valores de cada posicoes e deve escolher qual quer procurar.
Posteriormente dois processos filhos sao criados e cada um deles eh responsavel por encontrar
o valor em uma range do vetor.

Execucao e saida:

Digite um dos seguintes valores para procurar:
3
5
1
9
1000

Valor: 1
O valor esta na posicao 2

*/
