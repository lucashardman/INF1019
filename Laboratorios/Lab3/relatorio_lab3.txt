Alunos:

Andre Mazal - 1410386
Lucas Hardman - 1113567

/********** Exercicio 1 **********/

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
 
#define EVER ;;

void intHandler(int sinal);
void quitHandler(int sinal);

int main(void) 

{

	void (*p)(int);
// ponteiro para função que recebe int como parâmetro 
	p = signal(SIGINT,intHandler);
	 
	printf("Endereco do manipulador anterior %p\n",p);
	 
	p = signal(SIGQUIT,quitHandler);
	 
	printf("Endereco do manipulador anterior %p\n",p);
	 
	puts("Ctrl-C desabilitado. Use Ctrl-\\ para terminar");
	 
	for(EVER);
 
}

void intHandler(int sinal) 
{ 
	printf("Você pressionou Ctrl-C (%d) \n", sinal); 
}

void quitHandler(int sinal) 
{ 
	printf("Terminando o processo... %d\n", sinal);
	exit(0); 
} 

Explicacao:

	O programa primeiramente registrou as funções intHandler e quitHandler como as funções de tratamento para os sinais SIGINT e SIGQUIT respectivamente. SIGINT equivale ao Ctrl-c e SIGQUIT ao Ctrl-\. Também imprimiu os endereços das funções manipuladoras prévias, que não existiam, e portanto imprimiu NIL. Depois, entrou num loop infinito. Quando então apertamos Ctrl-c, o programa é desviado para a função intHandler, que imprime "Você pressionou Ctrl-C (2)", porque 2 é o inteiro do sinal crtl-c. Já quando apertamos crtl-\ a handler quitHandler, que termina o processo com exit(0).

	Sem os comandos signal, ao apertarmos crtl-c no terminal encerramos o processo, o que é resultado da função de tratamento de sinais padrão.


/********** Exercicio 2 **********/

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>


void killHandler(int signal)
{
	printf("AHAHAHA!!! Sou imorrível\n");
}

int main(void) 

{

	void (*p)(int);
// ponteiro para função que recebe int como parâmetro 
	p = signal(SIGKILL, killHandler);
	
	while(1);	
 
}

Explicacao:

	Não conseguimos interceptar o sinal KILL com nosso handler. Fizemos um mesmo teste com o sinal SIGINT e consiguimos interceptar. Isso acontece porque o sinal KILL, por padrão do UNIX, não pode ser interceptado, por ser importante podermos interromper qualquer processo.

/********** Exercicio 3 **********/

ex3.c

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

void childhandler(int signo);

int delay;

int main(int argc, char *argv[]) 
{ 
	pid_t pid;
	 
	signal(SIGCHLD, childhandler);
	 
	if((pid = fork()) < 0) 
	{ 
		fprintf(stderr, "Erro ao criar filho\n");
		 
		exit(-1); 
	} 
	if(pid == 0) /*child */
	{
		execve(argv[2], &argv[2], NULL);
	} 
	else /*parent */
	{ 
		sscanf(argv[1],"%d", &delay); /*read delay from command line */
		sleep(delay); 
		printf("Program %s exceeded limit of %d seconds!\n", argv[2],delay); 
		kill(pid, SIGKILL); 
		sleep(1);   /*necessary for SIGCHLD to arrive */ 
	} 
	return 0; 
}



void childhandler(int signo)/*Executed if child dies before parent */
{ 
	int status; 
	pid_t pid = wait(&status); 
	printf("Child %d terminated within %d seconds com estado %d.\n", pid, delay, status); 
	exit(0); 
} 

filho5.c

#include <stdio.h>
#include <unistd.h>

int main(void) 
{ 
	fprintf(stdout,"indo dormir...\n");
 
	sleep(5); 
	fprintf(stdout,"Acordei!\n");
	return 0; 
}

filho15.c

#include <stdio.h>
#include <unistd.h>

int main(void) 
{ 
	fprintf(stdout,"indo dormir...\n");
 
	sleep(15); 
	fprintf(stdout,"Acordei!\n");
	return 0; 
}

Explicacao:

	O programa principal cria um processo filho, que executará um pequeno programa que imprime uma mensagem, dorme por n segundos e depois imprime outra. Enquanto isso, o processo pai espera por t tempo, passado como argumento na linha de comando. Caso passe t tempo e o processo filho ainda não tiver terminado, ou seja, o pequeno programa não tiver reacordado, o processo pai mata o processo filho e imprime uma mensagem de acordo. Caso não, o pequeno programa consegue imprimir sua segunda mensagem, mostrando que acordou, e o processo filho termina normalmente. Ao ser morto pelo pai ou terminar normalmente, o filho manda o sinal SIGCHLD, que é tratado no processo pai pela funçao childhandler.

/********** Exercicio 4 **********/

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

void childhandler(int signo);

int delay;

int main(int argc, char *argv[]) 
{ 
	pid_t pid1, pid2;
	 
	int cont, processo, trocas;
	 
	if((pid1 = fork()) < 0) 
	{ 
		fprintf(stderr, "Erro ao criar filho\n");
		 
		exit(-1); 
	} 
	if(pid1 == 0) /*child 1 */
	{
		while (1){
			printf("O processo filho 1 esta sendo executado.\n");
			sleep(1); //Sleep para facilitar a visualizacao
		}
	} 

	if((pid2 = fork()) < 0) 
	{ 
		fprintf(stderr, "Erro ao criar filho\n");
		 
		exit(-1); 
	} 
	if(pid2 == 0) /*child 2 */
	{
		while (1){
			printf("O processo filho 2 esta sendo executado.\n");
			sleep(1); //Sleep para facilitar a visualizacao
		}
	} 

	kill(pid1, SIGSTOP);
	kill(pid2, SIGSTOP);

	processo = 1;
	trocas = 0;

	for(cont=0; cont<10; cont++){ // 10 loops para fazer a troca de processo

		if(processo == 1){
			kill(pid2, SIGSTOP);
    		kill(pid1, SIGCONT);
    		printf("TROCA DE PROCESSO!\n");
    		processo = 2;
    		trocas++; //Só para teste
		}
		else if(processo == 2){
			kill(pid1, SIGSTOP);
    		kill(pid2, SIGCONT);
    		printf("TROCA DE PROCESSO!\n");
    		processo = 1;
    		trocas++; //Só para teste
		}

		sleep(2); //Tempo de espera para efetuar a troca de processos
	}

	//Processo pai mata os processos filhos
	kill(pid1, SIGKILL); 
	kill(pid2, SIGKILL); 

	printf("Total de trocas de processo: %d\n", trocas); //Só para teste

	return 0; 
}

Explicacao:

	O processo pai cria dois processos filhos, um com o pid1 e outro com o pid2. Logo depois o processo pai envia um sinal SIGSTOP para os dois processos entrarem em espera e inicia um for de 10 loops. No primeiro loop o processo filho 1 passa a entrar em execucao atraves do sinal SIGCONT enviado pelo pai. Nos seguintes loops ha uma troca, onde o processo que esta em execucao entra em espera (atraves do SIGSTOP) e o processo que esta em espera entra em execucao (atraves do SIGCONT). Ao acabar o loop o processo pai envia um sinal SIGKILL para o processo filho 1 e outro para o processo filho 2, e assim eles são finalizados.
